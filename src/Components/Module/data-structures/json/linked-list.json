{
  "name": "Linked List",
  "desc": "Contiguous elements in memory. Singularly linked lists store a pointer to the element at the front (head), and each node only stores a pointer to the next node in the list. In this table, we assume linked lists are open (non-circular).",
  "runtimeComplexity": {
    "average": {
      "search": {
        "runtime": "O(n)",
        "rank": 3,
        "desc": ""
      },
      "insertion": {
        "runtime": "O(1)",
        "rank": 1,
        "desc": "Insertion at the beginning of the list (using the head pointer) is a constant operation."
      },
      "deletion": {
        "runtime": "O(n)",
        "rank": 3,
        "desc": "Deletion involves two operations in a linked list: finding the tail element (takes O(n) at worst) and deleting the tail element (constant)."
      }
    },
    "worst": {
      "search": {
        "runtime": "O(n)",
        "rank": 3,
        "desc": "In the worst case, the element being searched for is at the end of the list."
      },
      "insertion": {
        "runtime": "O(1)",
        "rank": 1,
        "desc": "Insertion at the end of the list is a constant operation."
      },
      "deletion": {
        "runtime": "O(n)",
        "rank": 3,
        "desc": "Deletion involves two operations in a linked list: finding the tail element (takes O(n) at worst) and deleting the tail element (constant)."
      }
    }
  }
}