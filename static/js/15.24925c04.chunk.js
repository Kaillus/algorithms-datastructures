(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[15],{132:function(t,e,n){"use strict";n.r(e);var a=n(22),r=n(0),i=n.n(r),c=n(58),o=n(24),u=n(105),s=n(114),l=n.n(s),p=n(116),f=n(131),m=Object(c.a)((function(t){return{root:{},code:{fontSize:"calc(4px + 2vmin)",textAlign:"left!important",display:"inline-block!important",boxSizing:"border-box!important"},tooltip:{position:"relative"},text:{display:"table","&:hover":{color:"#eeeeee",backgroundColor:"rgba(00, 00, 00, 0.6)",boxShadow:"0 0 10px 3px rgba(00, 00, 00, 0.6)"}}}}));var b=function(t){var e=m(),n=(Object(o.a)(),Object(r.useState)([])),c=Object(a.a)(n,2),u=c[0],s=c[1],b=t.unit;return Object(r.useEffect)((function(){function t(){return(t=Object(p.a)(l.a.mark((function t(e){return l.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(e).then((function(t){return t.text()})).then((function(t){return t.split("\n")})).then((function(t){return t.filter((function(t){return!t.includes("////")}))})).then((function(t){return s(t)}));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}!function(e){t.apply(this,arguments)}(b)}),[b]),i.a.createElement("div",{className:e.code},u.map((function(t){return i.a.createElement(f.a,{title:t,interactive:!0,className:e.tooltip},i.a.createElement("pre",{className:e.text},t))})))},h=Object(c.a)((function(t){return{root:{},paper:{justifyContent:"center",alignItems:"center"}}}));e.default=function(t){var e=h(),n=(Object(o.a)(),i.a.useState(!1)),r=Object(a.a)(n,2);return r[0],r[1],i.a.createElement("div",null,i.a.createElement("h1",null,"Merge Sort is a divide-and-conquer algorithm"),i.a.createElement(u.a,{elevation:3,className:e.paper},i.a.createElement(b,{unit:"https://kaillus.github.io/algorithms-datastructures/Resources/CodeAnalysis/algorithms/merge.cpp"})))}}}]);
//# sourceMappingURL=15.24925c04.chunk.js.map