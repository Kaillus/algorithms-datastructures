(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[19],{118:function(e,t,n){"use strict";var a=n(2),i=n(1),r=n(0),s=n.n(r),o=(n(4),n(3)),c=n(5),l=[0,1,2,3,4,5,6,7,8,9,10],u=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var m=s.a.forwardRef((function(e,t){var n=e.alignContent,r=void 0===n?"stretch":n,c=e.alignItems,l=void 0===c?"stretch":c,u=e.classes,d=e.className,m=e.component,g=void 0===m?"div":m,x=e.container,p=void 0!==x&&x,f=e.direction,h=void 0===f?"row":f,v=e.item,b=void 0!==v&&v,w=e.justify,y=void 0===w?"flex-start":w,j=e.lg,S=void 0!==j&&j,C=e.md,E=void 0!==C&&C,O=e.sm,W=void 0!==O&&O,k=e.spacing,z=void 0===k?0:k,I=e.wrap,M=void 0===I?"wrap":I,N=e.xl,B=void 0!==N&&N,G=e.xs,P=void 0!==G&&G,R=e.zeroMinWidth,T=void 0!==R&&R,D=Object(a.a)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),J=Object(o.a)(u.root,d,p&&[u.container,0!==z&&u["spacing-xs-".concat(String(z))]],b&&u.item,T&&u.zeroMinWidth,"row"!==h&&u["direction-xs-".concat(String(h))],"wrap"!==M&&u["wrap-xs-".concat(String(M))],"stretch"!==l&&u["align-items-xs-".concat(String(l))],"stretch"!==r&&u["align-content-xs-".concat(String(r))],"flex-start"!==y&&u["justify-xs-".concat(String(y))],!1!==P&&u["grid-xs-".concat(String(P))],!1!==W&&u["grid-sm-".concat(String(W))],!1!==E&&u["grid-md-".concat(String(E))],!1!==S&&u["grid-lg-".concat(String(S))],!1!==B&&u["grid-xl-".concat(String(B))]);return s.a.createElement(g,Object(i.a)({className:J,ref:t},D))})),g=Object(c.a)((function(e){return Object(i.a)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return l.forEach((function(a){var i=e.spacing(a);0!==i&&(n["spacing-".concat(t,"-").concat(a)]={margin:"-".concat(d(i,2)),width:"calc(100% + ".concat(d(i),")"),"& > $item":{padding:d(i,2)}})})),n}(e,"xs"),{},e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var a={};u.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var i="".concat(Math.round(e/12*1e8)/1e6,"%");a[t]={flexBasis:i,flexGrow:0,maxWidth:i}}else a[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else a[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?Object(i.a)(e,a):e[t.breakpoints.up(n)]=a}(t,e,n),t}),{}))}),{name:"MuiGrid"})(m);t.a=g},133:function(e){e.exports=JSON.parse('{"name":"Binary Search","desc":"Binary search can only be used on sorted collections. Try not to get this confused with the Binary Search Tree data structure.","runtimeComplexity":{"average":{"runtime":"O(log n)","rank":2,"desc":""},"worst":{"runtime":"O(log n)","rank":2,"desc":"This is because each time a binary search algorithm iterates, it jumps halfway through the remaining list in a given direction, meaning the maximum number of jumps it can possibly take is log base 2 of the number of nodes. This can also be seen as the depth of the binary search tree."}},"spaceComplexity":{"worst":{"runtime":"O(1)","rank":1,"desc":""}}}')},170:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(59),s=n(107),o=n(118),c=n(133),l=Object(a.lazy)((function(){return Promise.all([n.e(0),n.e(1),n.e(2)]).then(n.bind(null,116))})),u=Object(a.lazy)((function(){return Promise.all([n.e(0),n.e(3)]).then(n.bind(null,115))})),d=Object(a.lazy)((function(){return Promise.all([n.e(18),n.e(21)]).then(n.bind(null,152))})),m=Object(r.a)((function(e){return{root:{flexGrow:1},paper:{padding:e.spacing(1),maxWidth:"50vw"},container:{marginLeft:"10px",marginRight:"10px"}}}));t.default=function(e){var t,n=m(),a=e.id;t=e.useGitPath?"https://raw.githubusercontent.com/Kaillus/algorithms-datastructures/master/public/Resources/CodeAnalysis/algorithms/"+a+".cpp":"../../Resources/CodeAnalysis/algorithms/"+a+".cpp";var r=[c,c,c];return i.a.createElement("div",null,i.a.createElement("h1",null,"Merge Sort is a recursive, divide-and-conquer algorithm"),i.a.createElement(s.a,{elevation:3,className:n.container},i.a.createElement(o.a,{container:!0,spacing:0,direction:"row",alignItems:"center"},i.a.createElement(o.a,{item:!0,xs:12,sm:6},i.a.createElement(s.a,{elevation:0,className:n.paper},i.a.createElement(l,{unit:t,id:a}))),i.a.createElement(o.a,{item:!0,xs:12,sm:6},i.a.createElement(s.a,{elevation:0,className:n.paper},i.a.createElement(u,{unit:t,id:a}))))),i.a.createElement(d,{unit:c,id:a,solo:!0}),i.a.createElement(d,{unit:r,id:a}))}}}]);
//# sourceMappingURL=19.d12a9da9.chunk.js.map